Index: front/src/app/services/criterio.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { Injectable } from '@angular/core';\r\nimport { environment  } from '../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Escala } from '../models/escala.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CriterioService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  actualizarLista(uid:string, plista: string[]) {\r\n    const data = {lista: plista};\r\n    return this.http.put(`${environment.base_url}/criterios/lista/${uid}`, data, this.cabeceras);\r\n  }\r\n\r\n  crearCriterio(data) {\r\n    return this.http.post(`${environment.base_url}/criterios/`, data, this.cabeceras);\r\n  }\r\n\r\n  actualizarCriterio(uid: string, data) {\r\n    return this.http.put(`${environment.base_url}/criterios/${uid}`, data, this.cabeceras);\r\n  }\r\n\r\n  cargarCriterio( uid: string ) {\r\n    if (uid === undefined) { uid=''}\r\n    return this.http.get(`${environment.base_url}/criterios/?id=${uid}` , this.cabeceras);\r\n  }\r\n\r\n  cargarCriterios( desde: number, textoBusqueda?: string, hasta?:string ): Observable<object> {\r\n    if (!desde) { desde = 0; }\r\n    if (!textoBusqueda) { textoBusqueda = ''; }\r\n    if (!hasta) { hasta = '10'; }\r\n    return this.http.get(`${environment.base_url}/criterios/?desde=${desde}&texto=${textoBusqueda}&hasta=${hasta}` , this.cabeceras);\r\n  }\r\n\r\n  async cargarValoresPorIteracion(uid: string) {\r\n    if (!uid) uid = '';\r\n    return this.http.get<[]>(`${environment.base_url}/criterios/iteracion/${uid}` , this.cabeceras).toPromise();\r\n  }\r\n\r\n  cargarEscalasPorCriterio( uid: string ): Observable<Escala[]> {\r\n    if (!uid) uid = '';\r\n    console.log('ID: ',uid);\r\n    console.log(this.cabeceras)\r\n    return this.http.get<Escala[]>(`${environment.base_url}/escalas/${uid}` , this.cabeceras);\r\n  }\r\n\r\n  cargarAlumnos( desde: number, textoBusqueda?: string, hasta?:string ): Observable<object> {\r\n    if (!desde) { desde = 0; }\r\n    if (!textoBusqueda) { textoBusqueda = ''; }\r\n    if (!hasta) { hasta = '10'; }\r\n    return this.http.get(`${environment.base_url}/usuarios/?desde=${desde}&texto=${textoBusqueda}&hasta=${hasta}` , this.cabeceras);\r\n  }\r\n\r\n  listaAsignaturas(desde: number, texto: string, curso: string) {\r\n    if (!texto) {\r\n      texto = '';\r\n    } else {\r\n      texto = `&texto=${texto}`;\r\n    }\r\n    if (!curso) {\r\n      curso = '';\r\n    } else {\r\n      curso = `&curso=${curso}`;\r\n    }\r\n    return this.http.get(`${environment.base_url}/criterios/?desde=${desde}${texto}${curso}` , this.cabeceras);\r\n  }\r\n\r\n  eliminarCriterio(uid: string) {\r\n    return this.http.delete(`${environment.base_url}/criterios/${uid}`, this.cabeceras);\r\n  }\r\n\r\n  get cabeceras(): object {\r\n    return {\r\n      headers: {\r\n        'x-token': this.token\r\n      }};\r\n  }\r\n\r\n  get token(): string {\r\n    return localStorage.getItem('token') || '';\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/front/src/app/services/criterio.service.ts b/front/src/app/services/criterio.service.ts
--- a/front/src/app/services/criterio.service.ts	(revision a053d9da6822bb9aaa1f9bf0709f2008ec976622)
+++ b/front/src/app/services/criterio.service.ts	(date 1685038667448)
@@ -36,7 +36,7 @@
     return this.http.get(`${environment.base_url}/criterios/?desde=${desde}&texto=${textoBusqueda}&hasta=${hasta}` , this.cabeceras);
   }
 
-  async cargarValoresPorIteracion(uid: string) {
+  cargarValoresPorIteracion(uid: string): Promise<[]> {
     if (!uid) uid = '';
     return this.http.get<[]>(`${environment.base_url}/criterios/iteracion/${uid}` , this.cabeceras).toPromise();
   }
